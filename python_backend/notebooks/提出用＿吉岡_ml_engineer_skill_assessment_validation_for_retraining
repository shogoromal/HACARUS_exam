{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Eix530M7ZY7AF-Js_7o6eb_fehPLalmS","timestamp":1715379569099},{"file_id":"1IoWv7YfcDxYTEsYBjCGGE49CSHX0V8Lu","timestamp":1715314525898},{"file_id":"1tYVN-URmLF5KWaeY0bVUL3Zo5I0T62nD","timestamp":1690263929881}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["\n","# 課題: 機械学習モデル更新時の性能検証\n","\n","##課題の概要:\n","以下はTitanic号の生存者を予測するプログラムです。このプログラムを使用することで機械学習モデル(Titanic号の生存者を予測するモデル)を作成することができます。このモデルを運用し、モデルの継続的な学習、更新と性能検証(比較)を行っていくためのプログラムを作成してください。また、結果をサマリとして表示する方法についても説明してください。\n","\n","###課題に取り組むにあたって\n","-  `コード実装` タグがない限り、コードを実装することは必須ではありません。\n","- 実装を行う際、過去に使用経験のあるOSSやSaaSによる実装を前提としても問題ありません。\n","- 開発に用いたAI ツールはすべて明記してください (ChatGPT, github copilot 等)。\n","特に ChatGPT については、課題で使用したすべての質問・回答がわかるようにチャットの URL をレポート上、または本Notebook上で共有してください\n","\n","###課題の詳細:\n","\n","1. 課題の要件に基づいて、モデルの更新と比較を実現するためのアーキテクチャを示してください。アーキテクチャ図やフローチャートなどを使用して、プログラムの概要を視覚的に説明してください。\n","\n","1. モデルの監視と比較の手法について、実現方法やアルゴリズムの説明を提供してください。\n","  - モデル性能を監視してモデルを更新すべきタイミングを特定し、更新する方法を説明してください。\n","  - 過去のモデルとの比較を行うための指標や手法についても説明してください。\n","\n","1. `コード実装` リクエストを受け取ると学習したAIモデルを使って新たなデータに対して推論を行うWebサーバーを構築してください。\n","  - 新たなデータを取得、選択する方法は自由です。（リクエストに含める、クラウドからダウンロードする等）\n","  - 使用するモデルの更新を行うための機能を実装してください。\n","  - 第三者にこのアプリケーションを使用、開発してもらう前提でREADMEを提供してください。\n","  - 実装したコードはGitHubなどのコードホスティングサービスを以て提出するか、または`git archive`機能を使い、tar.gz に圧縮したものを提出してください。\n","  - (Optional) AWS, GCP, Azure等のクラウドサービス上でこのWebサーバーを実行できるようにするための手順及び使った機能を示してください。サーバーを実行するために使ったクラウドサービスのアーキテクチャ図も併せて提供してください。\n","\n","1. `コード実装` 過去のモデルにロールバックを行うために、モデルを作成した実験を管理、再現する機能を実装してください。\n","  - モデルを再現するために、モデルの学習に使用したデータを管理する機能も合わせて実装してください。\n","  - Webサーバーの機能として実装する必要はありません。別のアプリケーションとしても構いません。\n","  - 実装したコードはGitHubなどのコードホスティングサービスを以て提出するか、`git archive` 機能を使い、tar.gz に圧縮したものを提出してください。\n","  - (オプション)Webサーバーとどのように連携できるかについての概要も記載してください。\n","\n","1. AIの推論結果をサマリとして表示する方法について説明してください。どのような情報をサマリに含めるか、表示形式や可視化手法などを具体的に説明してください。\n","\n","1. `コード実装` プログラムの実行例やテストデータを使用して、モデルの更新とモデル更新前後の性能比較を実際に行った結果を示してください。結果の解釈や分析結果の有用性についても述べてください。\n","  - 画像などのファイル出力を以て確認する方法でも構いません\n","  - (オプション) 結果を見渡しやすくするダッシュボードの実装、またはアイデアを可視化してください。\n","\n","1. オプション: モデルの更新と比較を自動化するために、モデルの更新が検出された場合に自動的にプログラムが実行される仕組みやツールについて提案してください。\n","\n","\n","この課題は、機械学習モデル更新時における性能検証（比較）の基本的な概念と実装方法を評価するためのものです。また、基本的なツールやライブラリの使用、アーキテクチャの設計、結果のサマリの表示方法なども評価の対象となります。結果のみでなく、なぜそう判断をしたのか考え方も示してください。考察はColabにテキストを挿入して記載いただくか、Colab内に記載がしにくい部分に関しては、別途Docファイル、Markdownファイルなどにレポートという形で記載いただいて構いません。"],"metadata":{"id":"X-8mxxTHTpQp"}},{"cell_type":"markdown","source":["# Task: Performance Validation during Machine Learning Model Update\n","\n","## Task Overview:\n","Below is a program for predicting the survivors of the Titanic. This program can be used to create a machine learning model (a model to predict the survivors of the Titanic). Please create a program for the operation of this model, continuous learning, updating and performance verification (comparison) of the model. Also, please explain how to display the results as a summary.\n","\n","### When tackling the task\n","- Unless the `code implementation` tag is present, implementing the code is not mandatory.\n","- When implementing, it is acceptable to assume implementation using OSS or SaaS that has been used in the past.\n","- Please clearly state all AI tools used in the development (such as ChatGPT, GitHub Copilot, etc.). Specifically for ChatGPT, share the URL of the chat in the report or in this Notebook, so that all questions and answers used for the task are identifiable.\n","\n","### Task Details:\n","\n","1. Based on the requirements of the task, please show the architecture to realize the update and comparison of the model. Use architecture diagrams or flowcharts to visually explain the overview of the program.\n","\n","2.`code implementation`  Build a web server that uses the trained AI model to make inferences on new data when receiving a request.\n","  - The method of obtaining and selecting new data is free (include it in the request, download from the cloud, etc.)\n","  - Please implement a function to update the model to be used.\n","  - When building a web server, assume that it will be provided as a product, and include some measures to maintain maintainability.\n","  - The implemented code should be submitted via a code hosting service such as GitHub, or by using the git archive feature to compress it into a tar.gz file for submission.\n","  - Optional: Please provide the steps and features used to enable this web server to run on cloud services such as AWS, GCP, Azure, etc. Also, include an architecture diagram of the cloud service used to run the server.\n","\n","3. Please explain how to display the inference results of AI as a summary. Please specifically explain what information to include in the summary, display format, visualization methods, etc.\n","\n","4. Provide an explanation of the method and algorithm for monitoring and comparing the model.\n","  - Explain the method to identify the timing to update by monitoring the model performance and to update.\n","  - Also explain about the indicators and methods for comparing with past models.\n","\n","5. `Code implementation` Please show the results of actually performing the model update and performance comparison before and after the model update using examples of program execution and test data. Please also mention the interpretation of the results and the usefulness of the analysis results.\n","\n","6. `Code implementation` Please implement a function to manage and reproduce the experiments that created the model in order to roll back to past models.\n","- It does not need to be included as a function in the server. You can implement this itself as a separate application.\n","- The implemented code should be submitted via a code hosting service such as GitHub, or by using the git archive feature to compress it into a tar.gz file for submission.\n","\n","7. Optional: Propose a mechanism or tool that automatically executes the program when a model update is detected in order to automate the model update and comparison.\n","\n","\n","This task is intended to evaluate the basic concepts and implementation methods of performance validation (comparison) during machine learning model updates. Also, the use of basic tools and libraries, architecture design, methods of displaying summary results, etc., are subject to evaluation. In addition to the results, please also show why you made such a judgment. Considerations can be inserted into the text in Colab, or if it is difficult to describe in Colab, it can be written in a separate Doc file or Markdown file in the form of a report."],"metadata":{"id":"JIJ7ow1Gdait"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score"],"metadata":{"id":"8HZif26JTiJ6","executionInfo":{"status":"ok","timestamp":1715517160789,"user_tz":-540,"elapsed":952,"user":{"displayName":"吉岡尚悟","userId":"17620221680818102697"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["# URL to the Titanic dataset\n","url = \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n","# Read data from the URL\n","data = pd.read_csv(url)"],"metadata":{"id":"oEeurLgLQZU1","executionInfo":{"status":"ok","timestamp":1715517161732,"user_tz":-540,"elapsed":7,"user":{"displayName":"吉岡尚悟","userId":"17620221680818102697"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["# Preprocess the data\n","data = data[['Survived', 'Pclass', 'Sex', 'Age', 'Fare']]\n","data['Sex'] = data['Sex'].map({'male': 0, 'female': 1})\n","data = data.dropna()"],"metadata":{"id":"wTUxkQ3dQe7f","executionInfo":{"status":"ok","timestamp":1715517161732,"user_tz":-540,"elapsed":7,"user":{"displayName":"吉岡尚悟","userId":"17620221680818102697"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["# Split the data into features and target\n","X = data.drop('Survived', axis=1)\n","y = data['Survived']\n","# Split the data into training set and test set\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"08CQXzjbQjYO","executionInfo":{"status":"ok","timestamp":1715517161732,"user_tz":-540,"elapsed":7,"user":{"displayName":"吉岡尚悟","userId":"17620221680818102697"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["# Train the model and make predictions\n","model = LogisticRegression()\n","model.fit(X_train, y_train)\n","predictions = model.predict(X_test)"],"metadata":{"id":"1_Wtu-TCQwC5","executionInfo":{"status":"ok","timestamp":1715518697855,"user_tz":-540,"elapsed":247,"user":{"displayName":"吉岡尚悟","userId":"17620221680818102697"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["# Print the accuracy\n","print('Accuracy:', accuracy_score(y_test, predictions))\n","\n","# Predict survival for a new passenger\n","new_passenger = pd.DataFrame({'Pclass': [3], 'Sex': [0], 'Age': [22.0], 'Fare': [7.25]})\n","survival_prediction = model.predict(new_passenger)\n","print('Survival prediction for the new passenger:', survival_prediction)"],"metadata":{"id":"sR-JsVwpQzm_","executionInfo":{"status":"ok","timestamp":1715518698231,"user_tz":-540,"elapsed":3,"user":{"displayName":"吉岡尚悟","userId":"17620221680818102697"}},"outputId":"e878b5ea-a55f-4f95-cf18-401f5efc42b8","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.7552447552447552\n","Survival prediction for the new passenger: [0]\n"]}]},{"cell_type":"code","source":["type(model.coef_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4Gub-kxx4gMz","executionInfo":{"status":"ok","timestamp":1715518719396,"user_tz":-540,"elapsed":442,"user":{"displayName":"吉岡尚悟","userId":"17620221680818102697"}},"outputId":"f4564156-7b8f-445d-acfd-056e8e3ef065"},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["model.coef_ = np.array([[1,0,0,0]], dtype= float)"],"metadata":{"id":"yOVTax2qHQZI","executionInfo":{"status":"ok","timestamp":1715518998866,"user_tz":-540,"elapsed":296,"user":{"displayName":"吉岡尚悟","userId":"17620221680818102697"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["# Train the model and make predictions\n","predictions = model.predict(X_test)\n","\n","# Print the accuracy\n","print('Accuracy:', accuracy_score(y_test, predictions))"],"metadata":{"id":"XxAq9nGAHXUy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715519000377,"user_tz":-540,"elapsed":263,"user":{"displayName":"吉岡尚悟","userId":"17620221680818102697"}},"outputId":"0f3c6e07-2e33-4ca9-87cc-5f407652d10d"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.3916083916083916\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Dl4ao9Z0RD-S","executionInfo":{"status":"ok","timestamp":1715517161732,"user_tz":-540,"elapsed":3,"user":{"displayName":"吉岡尚悟","userId":"17620221680818102697"}}},"execution_count":36,"outputs":[]}]}